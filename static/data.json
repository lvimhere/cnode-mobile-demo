{
    "success": true,
    "data": [
        {
            "id": "58d0fb3517f61387400b7e15",
            "author_id": "4f447c2f0a8abae26e01b27d",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/1ac00bee5abd7cc1d9a9435f861acba6.png\" alt=\"screenshot.png\"></p>\n<blockquote>\n<p>原文地址：<a href=\"https://zhuanlan.zhihu.com/p/25860846\">https://zhuanlan.zhihu.com/p/25860846</a></p>\n</blockquote>\n<hr>\n<p>时光如梭，转眼间 Egg.js 已经开源半年了，我们很荣幸地宣布，Egg.js 正式发布 1.0 版本。</p>\n<ul>\n<li>官网传送门：<a href=\"https://eggjs.org\">https://eggjs.org</a></li>\n<li>GitHub：<a href=\"https://github.com/eggjs/egg\">https://github.com/eggjs/egg</a></li>\n<li>Egg.js 英文文档：与 SwiftGG 翻译组强强联合，中译英的小伙伴招募中，如果你有兴趣，请试译 这篇文章 ，并注明你的 qq 号，发送给 SwiftGG 的同学邮箱(<a href=\"mailto:1030041592@qq.com\">1030041592@qq.com</a>)。期待你的加入！</li>\n</ul>\n<h2>特点</h2>\n<ul>\n<li><strong>『企业级的 Node.js Web 基础框架』</strong>，寓意 - 孕育新生。</li>\n<li>业界领先的 <strong>『微内核 + 插件机制』</strong>，专为团队架构师量身打造的 <strong>『框架定制』</strong> 能力。</li>\n<li>内建的安全机制与多进程管理模型。</li>\n<li>高可用，高质量，严格遵循 Semver 规则，测试覆盖率 100%（travis/appveyor)。</li>\n<li>同时支持 koa 1.x 和 2.x 生态，支持 ES 2017 Async Await。</li>\n<li>沉淀自阿里各行各业不同领域最佳实践的插件，涵盖了常见的业务开发场景，稳定支撑了 15 和 16 年天猫双11大促，顶级流量压力。</li>\n<li>渐进式，极具伸缩性，既适合个人小项目快速开发，也适合企业级的团队开发协作。</li>\n</ul>\n<h2>里程碑</h2>\n<ul>\n<li>2013 年蚂蚁的 chair 框架，可视为 Egg.js 前身。</li>\n<li>2015 年 11 月，在苏千的召集下，阿里各 BU 的前端骨干齐聚黄龙，闭门共建一周。</li>\n<li>2016 年初，各 BU 的基础 Web 框架完成升级，在同一套规范的基础上进行差异化定制。</li>\n<li>2016 年中，成为阿里 Node.js 基建，广泛使用在绝大部分阿里的前端 Node.js 应用。</li>\n<li>2016 年 09 月，在 <a href=\"http://2016.jsconf.cn/\">JSConf China 2016</a> 上亮相并宣布开源。</li>\n<li>2017 年初，经过一周的<a href=\"https://cnodejs.org/topic/5870e9da04dcf9a706a745f0\">闭关直播写文档</a>，期待已久的 <a href=\"https://eggjs.org/\">官方文档</a> 诚意登场，足足近 30 篇。</li>\n<li>2017年 02 月，知乎问答：<a href=\"https://www.zhihu.com/question/50526101/answer/144952130\">如何评价阿里开源的企业级 Node.js 框架 egg？</a></li>\n<li>2017 年 02 月第 2 周，上了 <strong>GitHub Trending</strong> 周榜第三，Star 数增加 1k 多。</li>\n<li>2017 年 03 月 21 日，Egg.js 正式发布 1.0.0 。</li>\n</ul>\n<h2>成就</h2>\n<ul>\n<li>截止到今天，2250+ Star，50+ 插件，10+ 核心开发者，30+ 贡献者。</li>\n<li>GitHub Trending 周榜第三，并上了 Node Weekly 周刊。</li>\n<li>官网 UV 日均 300+ 。</li>\n</ul>\n<p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/2a69766ae55cab517418e7b2f004d9b9.png\" alt=\"screenshot.png\"></p>\n<ul>\n<li>Node TSC Director - Rod Vagg 在 Twitter 上关注并转发。</li>\n</ul>\n<p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/42f3483f8c7b9a39678958816f477ae2.png\" alt=\"screenshot.png\"></p>\n<h2>感言</h2>\n<p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/6461618ea8944a1fb5ada1db8aeb7de7.png\" alt=\"screenshot.png\"></p>\n<h2>规划</h2>\n<ul>\n<li>Egg.js 英文文档翻译，欢迎加入 <a href=\"http://swift.gg/\">SwiftGG 翻译组</a> 发起的 <a href=\"https://github.com/eggjs/egg/issues/363\">Egg 文档翻译项目</a>。</li>\n<li>继续完善文档，沉淀最佳实践，并帮助社区产出更多的插件和上层框架。</li>\n<li>Node.js 8 LTS 发布后，底层将无缝升级到 Koa<a href=\"/user/2\">@2</a> 。</li>\n</ul>\n</div>",
            "title": "Egg.js 1.0.0 正式发布 - 企业级 Node.js 框架",
            "last_reply_at": "2017-04-03T06:24:58.925Z",
            "good": false,
            "top": true,
            "reply_count": 74,
            "visit_count": 5304,
            "create_at": "2017-03-21T10:06:45.487Z",
            "author": {
                "loginname": "atian25",
                "avatar_url": "https://avatars.githubusercontent.com/u/227713?v=3&s=120"
            }
        },
        {
            "id": "58ad76db7872ea0864fedfcc",
            "author_id": "51f0f267f4963ade0e08f503",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p><img src=\"//dn-cnode.qbox.me/FlwW5i2h_UuKpnBXXvD3AqyrwjHP\" alt=\"untitled4.png\"></p>\n<h1>饿了么大前端 Node.js 进阶教程</h1>\n<p>因为 2016 年面试了很多做 Node.js 的同学，发现大部分做 Node 的同学都是前端转过来的，对后端的知识大多一片空白。所以很难招到比较好的 Node.js 服务端程序员（注意，不是全栈）。</p>\n<p>于是出于我们一贯的开源与分享精神，我们筹备了这个名字叫《如何通过饿了么 Node.js 面试》的开源的 Node.js 进阶教程。</p>\n<p>github 仓库地址：<a href=\"https://github.com/ElemeFE/node-interview\">https://github.com/ElemeFE/node-interview</a></p>\n<h3>导读</h3>\n<p>本教程包含 2~3 年经验的 Node.js 服务端需要知道的知识点。</p>\n<p>需要注意的是, 并不适用于零基础的同学, 你需要有一定的 JavaScript/Node.js 基础, 并且有一定的工作经验. 另外本教程的重点更准确的说是服务端基础中 Node.js 程序员需要了解的部分.</p>\n<p>稳重将一些常见的问题划分归类, 每类标明涵盖的一些<code>覆盖点</code>, 并且列举几个<code>常见问题</code>, 通常这些问题都是 2~3 年工作经验需要了解或者面对的. 如果你对某类问题感兴趣, 或者想知道其中列举问题的答案, 可以通过该类下方的 <code>阅读更多</code> 查看更多的内容.</p>\n<p>整体上大纲列举的并不是很全面, 细节上覆盖率不高, 很多讨论只是点到即止, 希望大家带着问题去思考.</p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md\">Js 基础问题</a></h2>\n<blockquote>\n<p>与前端 Js 不同, 后端是直面服务器的, 更加偏向内存方面.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD\"><code>[Basic]</code> 类型判断</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><code>[Basic]</code> 作用域</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92\"><code>[Basic]</code> 引用传递</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE\"><code>[Basic]</code> 内存释放</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#es6-%E6%96%B0%E7%89%B9%E6%80%A7\"><code>[Basic]</code> ES6 新特性</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>js 中什么类型是引用传递, 什么类型是值传递? 如何将值类型的变量以引用的方式传递? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#q-value\">[more]</a></li>\n<li>js 中， 0.1 + 0.2 === 0.3 是否为 true ? 在不知道浮点数位数时应该怎样判断两个浮点数之和与第三数是否相等？</li>\n<li>const 定义的 Array 中间元素能否被修改? 如果可以, 那 const 的意义是? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#q-const\">[more]</a></li>\n<li>JavaScript 中不同类型以及不同环境下变量的内存都是何时释放? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md#q-mem\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/js-basic.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md\">模块</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md#%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6\"><code>[Basic]</code> 模块机制</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md#%E7%83%AD%E6%9B%B4%E6%96%B0\"><code>[Basic]</code> 热更新</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md#%E4%B8%8A%E4%B8%8B%E6%96%87\"><code>[Basic]</code> 上下文</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>a.js 和 b.js 两个文件互相 require 是否会死循环? 双方是否能导出变量? 如何从设计上避免这种问题? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md#q-loop\">[more]</a></li>\n<li>如果 a.js require 了 b.js, 那么在 b 中定义全局变量 <code>t = 111</code> 能否在 a 中直接打印出来? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md#q-global\">[more]</a></li>\n<li>如何在不重启 node 进程的情况下热更新一个 js/json 文件? 这个问题本身是否有问题? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md#q-hot\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/module.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md\">事件/异步</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#promise\"><code>[Basic]</code> Promise</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#events\"><code>[Doc]</code> Events (事件)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#timers\"><code>[Doc]</code> Timers (定时器)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#%E9%98%BB%E5%A1%9E%E5%BC%82%E6%AD%A5\"><code>[Point]</code> 阻塞/异步</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#%E5%B9%B6%E8%A1%8C%E5%B9%B6%E5%8F%91\"><code>[Point]</code> 并行/并发</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>Promise 中 .then 的第二参数与 .catch 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#q-1\">[more]</a></li>\n<li>Eventemitter 的 emit 是同步还是异步? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#q-2\">[more]</a></li>\n<li>如何判断接口是否异步? 是否只要有回调函数就是异步? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#q-3\">[more]</a></li>\n<li>nextTick, setTimeout 以及 setImmediate 三者有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#q-4\">[more]</a></li>\n<li>如何实现一个 sleep 函数? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#q-5\">[more]</a></li>\n<li>如何实现一个异步的 reduce? (注:不是异步完了之后同步 reduce) <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md#q-6\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/event-async.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md\">进程</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#process\"><code>[Doc]</code> Process (进程)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#child-process\"><code>[Doc]</code> Child Processes (子进程)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#cluster\"><code>[Doc]</code> Cluster (集群)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1\"><code>[Basic]</code> 进程间通信</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B\"><code>[Basic]</code> 守护进程</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>进程的当前工作目录是什么? 有什么作用? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#q-cwd\">[more]</a></li>\n<li>child_process.fork 与 POSIX 的 fork 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#q-fork\">[more]</a></li>\n<li>父进程或子进程的死亡是否会影响对方? 什么是孤儿进程? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#q-child\">[more]</a></li>\n<li>cluster 是如何保证负载均衡的? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#how-it-works\">[more]</a></li>\n<li>什么是守护进程? 如何实现守护进程? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/process.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md\">IO</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#buffer\"><code>[Doc]</code> Buffer</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#string-decoder\"><code>[Doc]</code> String Decoder (字符串解码)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#stream\"><code>[Doc]</code> Stream (流)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#console\"><code>[Doc]</code> Console (控制台)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#file\"><code>[Doc]</code> File System (文件系统)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#readline\"><code>[Doc]</code> Readline</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#repl\"><code>[Doc]</code> REPL</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>Buffer 一般用于处理什么数据? 其长度能否动态变化? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#buffer\">[more]</a></li>\n<li>Stream 的 highWaterMark 与 drain 事件是什么? 二者之间的关系是? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#%E7%BC%93%E5%86%B2%E5%8C%BA\">[more]</a></li>\n<li>Stream 的 pipe 的作用是? 在 pipe 的过程中数据是引用传递还是拷贝传递? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#pipe\">[more]</a></li>\n<li>什么是文件描述符? 输入流/输出流/错误流是什么? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#file\">[more]</a></li>\n<li>console.log 是同步还是异步? 如何实现一个 console.log? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#console\">[more]</a></li>\n<li>如何同步的获取用户的输入?  <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5%E7%9A%84%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E8%BE%93%E5%85%A5\">[more]</a></li>\n<li>Readline 是如何实现的? (有思路即可) <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md#readline\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/io.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md\">Network</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#net\"><code>[Doc]</code> Net (网络)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#udp\"><code>[Doc]</code> UDP/Datagram</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#http\"><code>[Doc]</code> HTTP</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#dns\"><code>[Doc]</code> DNS (域名服务器)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#zlib\"><code>[Doc]</code> ZLIB (压缩)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#rpc\"><code>[Point]</code> RPC</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>cookie 与 session 的区别? 服务端如何清除 cookie? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#q-cookie-session\">[more]</a></li>\n<li>HTTP 协议中的 POST 和 PUT 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#q-post-put\">[more]</a></li>\n<li>什么是跨域请求? 如何允许跨域? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#q-cors\">[more]</a></li>\n<li>TCP/UDP 的区别? TCP 粘包是怎么回事，如何处理? UDP 有粘包吗? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#q-tcp-udp\">[more]</a></li>\n<li><code>TIME_WAIT</code> 是什么情况? 出现过多的 <code>TIME_WAIT</code> 可能是什么原因? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#q-time-wait\">[more]</a></li>\n<li>ECONNRESET 是什么错误? 如何复现这个错误?</li>\n<li>socket hang up 是什么意思? 可能在什么情况下出现? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md#socket-hang-up\">[more]</a></li>\n<li>hosts 文件是什么? 什么叫 DNS 本地解析?</li>\n<li>列举几个提高网络传输速度的办法?</li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/network.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md\">OS</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#tty\"><code>[Doc]</code> TTY</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#os\"><code>[Doc]</code> OS (操作系统)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#path\"><code>[Doc]</code> Path</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0\"><code>[Doc]</code> 命令行参数</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#%E8%B4%9F%E8%BD%BD\"><code>[Basic]</code> 负载</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#checklist\"><code>[Point]</code> CheckList</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>什么是 TTY? 如何判断是否处于 TTY 环境? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#tty\">[more]</a></li>\n<li>不同操作系统的换行符 (EOL) 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#os\">[more]</a></li>\n<li>服务器负载是什么概念? 如何查看负载? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#%E8%B4%9F%E8%BD%BD\">[more]</a></li>\n<li>ulimit 是用来干什么的? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md#ulimit\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/os.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md\">错误处理/调试/优化</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#errors\"><code>[Doc]</code> Errors (异常)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#domain\"><code>[Doc]</code> Domain (域)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#debugger\"><code>[Doc]</code> Debugger (调试器)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#c-c++-addon\"><code>[Doc]</code> C/C++ 插件</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#v8\"><code>[Doc]</code> V8</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7\"><code>[Point]</code> 内存快照</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#cpu-profiling\"><code>[Point]</code> CPU profiling</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>怎么处理未预料的出错? 用 try/catch ，domains 还是其它什么? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#q-handle-error\">[more]</a></li>\n<li>什么是 <code>uncaughtException</code> 事件? 一般在什么情况下使用该事件? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#uncaughtexception\">[more]</a></li>\n<li>domain 的原理是? 为什么要弃用 domain? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#domain\">[more]</a></li>\n<li>什么是防御性编程? 与其相对的 let it crash 又是什么?</li>\n<li>为什么要在 cb 的第一参数传 error? 为什么有的 cb 第一个参数不是 error, 例如 http.createServer?</li>\n<li>为什么有些异常没法根据报错信息定位到代码调用? 如何准确的定位一个异常? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#%E9%94%99%E8%AF%AF%E6%A0%88%E4%B8%A2%E5%A4%B1\">[more]</a></li>\n<li>内存泄漏通常由哪些原因导致? 如何分析以及定位内存泄漏? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md#%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/error.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md\">测试</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95\"><code>[Basic]</code> 测试方法</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 单元测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 集成测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 基准测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 压力测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#assert\"><code>[Doc]</code> Assert (断言)</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>为什么要写测试? 写测试是否会拖累开发进度?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#q-why-write-test\">[more]</a></li>\n<li>单元测试的单元是指什么? 什么是覆盖率?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\">[more]</a></li>\n<li>测试是如何保证业务逻辑中不会出现死循环的?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#q-death-loop\">[more]</a></li>\n<li>mock 是什么? 一般在什么情况下 mock?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md#mock\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/test.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md\">util</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#url\"><code>[Doc]</code> URL</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#query-strings\"><code>[Doc]</code> Query Strings (查询字符串)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#util-1\"><code>[Doc]</code> Utilities (实用函数)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><code>[Basic]</code> 正则表达式</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>HTTP 如何通过 GET 方法 (URL) 传递 let arr = [1,2,3,4] 给服务器? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#get-param\">[more]</a></li>\n<li>Node.js 中继承 (util.inherits) 的实现? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#utilinherits\">[more]</a></li>\n<li>如何递归获取某个文件夹下所有的文件名? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md#q-traversal\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/util.md\">阅读更多</a></p>\n<h2>整理中的专题</h2>\n<ul>\n<li>存储</li>\n<li>安全</li>\n</ul>\n<h2>最后</h2>\n<p>目前 repo 处于施工现场的情况，如果发现问题欢迎在 <a href=\"https://github.com/ElemeFE/node-interview/issues\">issues</a> 中指出。如果有比较好的<code>问题/知识点/指正</code>，也欢迎提 PR。</p>\n<p>另外关于 <code>Js 基础</code> 是个比较大的话题，在本教程不会很细致深入的讨论，更多的是列出一些重要或者更服务端更相关的地方，所以如果你拿着《JavaScript 权威指南》给教程提 PR 可能不会采纳。本教程的重点更准确的说是服务端基础中 Node.js 程序员需要了解的部分。</p>\n</div>",
            "title": "饿了么大前端 Node.js 进阶教程",
            "last_reply_at": "2017-04-01T08:10:41.428Z",
            "good": true,
            "top": true,
            "reply_count": 98,
            "visit_count": 18260,
            "create_at": "2017-02-22T11:32:43.547Z",
            "author": {
                "loginname": "lellansin",
                "avatar_url": "https://avatars1.githubusercontent.com/u/2081487?v=3&s=120"
            }
        },
        {
            "id": "57ea257b3670ca3f44c5beb6",
            "author_id": "541bf9b9ad60405c1f151a03",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><blockquote>\n<p>写在头部</p>\n</blockquote>\n<p>本项目写于小程序发布之初，期间小程序官方有过几次更新，例如准备移除了loading组件、改变page的默认高度等，主要看的还是博卡君的文章，后来在朋友的建议下在9月27号写了本篇文章并分享到github上，是做为微信小应用的入门教程，<strong>并非某在线学习网站499收费课程的作业</strong>，特此声明。</p>\n<blockquote>\n<p>微信应用号入门实践之cnode社区版</p>\n</blockquote>\n<p>首先感谢cnode社区提供的api，本次实现了简单的cnode社区应用号制作。\n实现了数据的读取、展示，\n实现了简单的布局，\n实现了下一页功能。</p>\n<p>放上我的github地址\n<a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p>\n<p><img src=\"//dn-cnode.qbox.me/Fo4zG2Vfe50352POPZYXv8Ls0Jcc\" alt=\"首页列表\">\n<img src=\"//dn-cnode.qbox.me/Fl7TiaW13s541lHZ7Crq7NxKshqG\" alt=\"内容详情\"></p>\n<p>下面就说说我做这个的过程，不足之处，请多多指教，只愿为进步。</p>\n<h2>1.创建项目</h2>\n<p>首先，在官网下载工具，<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=1474887501214\">下载地址</a> 我的是选择mac版本0.9.092300。</p>\n<p>然后跟着官方的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1474887501301\">简版教程</a> 创建一个项目。</p>\n<h4>注：现在官方的工具支持无appid创建项目。</h4>\n<h5>1.打开开发者工具，选择“添加项目”</h5>\n<p><img src=\"//dn-cnode.qbox.me/FsqxRNIzNDyzItbl-vhAFPr0J5t2\" alt></p>\n<h5>2.选择无appid，填写地址，创建项目</h5>\n<p><img src=\"//dn-cnode.qbox.me/Fp098WRAyxgJ415Dt_f0YGhjIMHr\" alt></p>\n<h5>3.创建成功，看到默认的Demo项目页面</h5>\n<p><img src=\"//dn-cnode.qbox.me/FuvUmKfcUu8MeLc4eeuwNBfkbfMC\" alt></p>\n<h2>2.配置</h2>\n<p>默认的项目里已经没有关于tabBar的配置信息，所以为了学习，我把这个配置进行了修改。</p>\n<p>首先关于配置的说明同样来自于<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=1474887501556\">官方</a></p>\n<p>注意：官方的代码有些字段是不一样的，小心被坑。</p>\n<pre class=\"prettyprint\"><code>{\n  &quot;pages&quot;:[\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;\n  ],\n  &quot;window&quot;:{\n    &quot;backgroundTextStyle&quot;:&quot;light&quot;,\n    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,\n    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,\n    &quot;navigationBarTextStyle&quot;:&quot;black&quot;\n  },\n  &quot;tabBar&quot;:{\n    &quot;list&quot;: [{\n      &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;: &quot;首页&quot;\n    }, {\n      &quot;pagePath&quot;: &quot;pages&#x2F;logs&#x2F;logs&quot;,\n      &quot;text&quot;: &quot;日志&quot;\n    }]\n  }\n}\n\n</code></pre><p>增加了tabBar, 查看调试\n<img src=\"//dn-cnode.qbox.me/Fl-OboTDeCULcPbs5BiM81nj_Xrc\" alt>\n看界面是如此的简陋，为此针对tabBar参考官方说明进行了简单的美化。</p>\n<pre class=\"prettyprint\"><code> &quot;tabBar&quot;:{\n    &quot;color&quot;:&quot;#272636&quot;,\n    &quot;selectedColor&quot;:&quot;#80bd01&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;borderStyle&quot;:&quot;white&quot;,\n    &quot;list&quot;:[{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;首页&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my_hl.png&quot;\n    },{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;我的&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list_hl.png&quot;\n    }]\n  }\n</code></pre><p>效果如图\n<img src=\"//dn-cnode.qbox.me/FjzwAq6RH5TstCXIYb5ZIt6z3cuj\" alt>\n最后根据文档，对默认页面的窗口表现进行了修改</p>\n<pre class=\"prettyprint\"><code>  &quot;window&quot;:{\n    &quot;backgroundTextStyle&quot;:&quot;black&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;navigationBarBackgroundColor&quot;:&quot;#000&quot;,\n    &quot;navigationBarTitleText&quot;:&quot;CNODE 应用号版&quot;,\n    &quot;navigationBarTextStyle&quot;:&quot;white&quot;,\n    &quot;enablePullDownRefresh&quot;:&quot;true&quot;\n  },\n</code></pre><p>效果如图\n<img src=\"//dn-cnode.qbox.me/Fl4S7o2m50JXXt1xebSgq1pNR_iX\" alt>\n整体配置文件为</p>\n<pre class=\"prettyprint\"><code>{\n  &quot;pages&quot;:[\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;\n  ],\n  &quot;window&quot;:{\n    &quot;backgroundTextStyle&quot;:&quot;black&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;navigationBarBackgroundColor&quot;:&quot;#000&quot;,\n    &quot;navigationBarTitleText&quot;:&quot;CNODE 应用号版&quot;,\n    &quot;navigationBarTextStyle&quot;:&quot;white&quot;,\n    &quot;enablePullDownRefresh&quot;:&quot;true&quot;\n  },\n  &quot;tabBar&quot;:{\n    &quot;color&quot;:&quot;#272636&quot;,\n    &quot;selectedColor&quot;:&quot;#80bd01&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;borderStyle&quot;:&quot;white&quot;,\n    &quot;list&quot;:[{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;首页&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my_hl.png&quot;\n    },{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;我的&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list_hl.png&quot;\n    }]\n  }\n}\n</code></pre><h2>3.制作首页列表</h2>\n<p>根据官方要求，我在pages文件夹内创建了topics文件夹，并创建了对应了 topics.js、topics.wxml、topics.wxss 三个文件。</p>\n<h3>1.注册页面</h3>\n<p>首先在配置文件里注册这个topics,</p>\n<pre class=\"prettyprint\"><code>  &quot;pages&quot;:[\n    &quot;pages&#x2F;topics&#x2F;topics&quot;,\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;\n  ],\n</code></pre><p>并且制定tabBar点击跳到对应的topics页面</p>\n<pre class=\"prettyprint\"><code>  &quot;tabBar&quot;:{\n    &quot;color&quot;:&quot;#272636&quot;,\n    &quot;selectedColor&quot;:&quot;#80bd01&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;borderStyle&quot;:&quot;white&quot;,\n    &quot;list&quot;:[{\n      &quot;pagePath&quot;:&quot;pages&#x2F;topics&#x2F;topics&quot;,\n      &quot;text&quot;:&quot;首页&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my_hl.png&quot;\n    },{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;我的&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list_hl.png&quot;\n    }]\n  }\n</code></pre><h5>注意：我发现注册页面的顺序会影响到默认显示tabBar的顺序，所以我把<code>&quot;pages/topics/topics&quot;</code>放到了<code>&quot;pages/index/index&quot;</code>的前面</h5>\n<p>然后编写topics.js</p>\n<pre class=\"prettyprint\"><code>Page({\n  data: {\n    title: &#x27;首页列表&#x27;\n  },\n  onLoad: function () {\n    console.log(&#x27;onLoad by topics&#x27;);\n  }\n});\n</code></pre><p>以及topics.wxml文件</p>\n<pre class=\"prettyprint\"><code>&lt;view class=&quot;topics-main&quot;&gt;\n  测试首页列表界面\n&lt;&#x2F;view&gt;\n</code></pre><p>和topics.wxss文件</p>\n<pre class=\"prettyprint\"><code>.topics-main {\n  background: #f60;\n  height: 100%;\n}\n</code></pre><p>最后效果如图\n<img src=\"//dn-cnode.qbox.me/FiunQ0XhES_sidHnkBN9YxABF2iI\" alt></p>\n<h3>2.创建请求</h3>\n<p>根据文档<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html?t=1474887499445\">请求数据</a>，在util文件夹内创建一个api.js文件，专门进行数据请求处理。</p>\n<pre class=\"prettyprint\"><code>&#x27;use strict&#x27;;\nvar HOST_URI = &#x27;https:&#x2F;&#x2F;cnodejs.org&#x2F;api&#x2F;v1&#x27;;\n\nvar GET_TOPICS = &#x27;&#x2F;topics&#x27;;\nvar GET_TOPIC_BY_ID = &#x27;&#x2F;topic&#x2F;&#x27;;\n\nfunction obj2uri (obj) {\n    return Object.keys(obj).map(function (k) {\n        return encodeURIComponent(k) + &#x27;=&#x27; + encodeURIComponent(obj[k]);\n    }).join(&#x27;&amp;&#x27;);\n}\n\nmodule.exports = {\n    &#x2F;&#x2F; 获取列表数据\n    getTopics: function (obj) {\n        return HOST_URI + GET_TOPICS + &#x27;?&#x27; + obj2uri(obj);\n    },\n    &#x2F;&#x2F; 获取内容页数据\n    getTopicByID: function (id, obj) {\n        return HOST_URI + GET_TOPIC_BY_ID + id + &#x27;?&#x27; + obj2uri(obj);\n    }\n};\n</code></pre><p>修改topics.js</p>\n<pre class=\"prettyprint\"><code>var Api = require(&#x27;..&#x2F;..&#x2F;utils&#x2F;api.js&#x27;);\n\nPage({\n  data: {\n    title: &#x27;首页列表&#x27;\n  },\n  onLoad: function () {\n    console.log(&#x27;onLoad by topics&#x27;);\n    this.fetchData();&#x2F;&#x2F; 获取数据\n  },\n  fetchData: function (data) {\n    &#x2F;&#x2F; 处理参数\n    if (!data) data = {};\n    if (!data.page) data.page = 1;\n    wx.request({\n      url: Api.getTopics(data),\n      success: function (res) {\n        console.log(res);\n      }\n    });\n  }\n});\n</code></pre><p>效果如图\n<img src=\"//dn-cnode.qbox.me/FoonyAMQBgqDpiTKZshoB3ZmnUEU\" alt>\n成功拿到了数据。</p>\n<h3>3.完善首页列表</h3>\n<p>拿到了数据，也能修改界面，那么就直接完善这个首页吧</p>\n<p>代码就不放了，直接上图\n<img src=\"//dn-cnode.qbox.me/Fo4zG2Vfe50352POPZYXv8Ls0Jcc\" alt>\n我认为这里值得说的大概只有loading、循环、传参、下一页和页面跳转了。</p>\n<h4>1.loading</h4>\n<pre class=\"prettyprint\"><code>  &lt;loading hidden=&quot;{{hidden}}&quot;&gt;\n    加载中...\n  &lt;&#x2F;loading&gt;\n</code></pre><p>在topics.wxml中写官方提供的loading组件，根据在topics.js中对hidden值的修改，来触发loading。</p>\n<h4>2.循环数据，展示列表</h4>\n<p>文档提供了<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html?t=1474887501556\">列表渲染</a></p>\n<p>通过<code>wx:for</code>实现列表的渲染。</p>\n<h5>注意: 默认数组的当前项的下标变量名默认为index，数组当前项的变量名默认为item。</h5>\n<pre class=\"prettyprint\"><code>&lt;block wx:for=&quot;{{postsList}}&quot;&gt;\n  &lt;view class=&quot;posts-item&quot; index=&quot;{{index}}&quot; id=&quot;{{item.id}}&quot; catchtap=&quot;redictDetail&quot;&gt;\n    &lt;view class=&quot;author&quot;&gt;\n      &lt;image class=&quot;author-avatar&quot; src=&quot;{{item.author.avatar_url}}&quot;&gt;&lt;&#x2F;image&gt;\n      &lt;view class=&quot;author-name&quot;&gt;{{item.author.loginname}}&lt;&#x2F;view&gt;\n      &lt;view class=&quot;posts-tag hot&quot; wx:if=&quot;{{item.top === true}}&quot;&gt;置顶&lt;&#x2F;view&gt;\n      &lt;view class=&quot;posts-tag&quot; wx:if=&quot;{{item.good === true}}&quot;&gt;精华&lt;&#x2F;view&gt;\n      &lt;view class=&quot;posts-last-reply&quot;&gt;{{item.last_reply_at}}&lt;&#x2F;view&gt;\n    &lt;&#x2F;view&gt;\n    &lt;view class=&quot;posts-title&quot;&gt;{{item.title}}&lt;&#x2F;view&gt;\n    &lt;view class=&quot;bar-info&quot;&gt;\n      &lt;view class=&quot;bar-info-item&quot;&gt;\n        &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;reply.png&quot;&gt;&lt;&#x2F;image&gt;\n        &lt;view class=&quot;bar-info-item-number&quot;&gt;{{item.reply_count}}&lt;&#x2F;view&gt;\n      &lt;&#x2F;view&gt;\n      &lt;view class=&quot;bar-info-item&quot;&gt;\n        &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;visit.png&quot;&gt;&lt;&#x2F;image&gt;\n        &lt;view class=&quot;bar-info-item-number&quot;&gt;{{item.visit_count}}&lt;&#x2F;view&gt;\n      &lt;&#x2F;view&gt;\n    &lt;&#x2F;view&gt;\n  &lt;&#x2F;view&gt;\n&lt;&#x2F;block&gt;\n</code></pre><p>附上一个没有样式的列表展现\n<img src=\"//dn-cnode.qbox.me/FkoTZY1Q9kqOWa1-e70FHifzHVo7\" alt></p>\n<h4>3.传参，实现tab切换</h4>\n<p>根据cnode的api可以知道通过tab不同的值，获得到不同标签下的内容列表。</p>\n<p>所以 在页面的最上面 tab 栏中</p>\n<pre class=\"prettyprint\"><code>  &lt;view class=&quot;top-bar&quot;&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;all&quot; catchtap=&quot;onTapTag&quot;&gt;全部&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;good&quot; catchtap=&quot;onTapTag&quot;&gt;精华&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;share&quot; catchtap=&quot;onTapTag&quot;&gt;分享&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;ask&quot; catchtap=&quot;onTapTag&quot;&gt;问答&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;job&quot; catchtap=&quot;onTapTag&quot;&gt;招聘&lt;&#x2F;view&gt;\n  &lt;&#x2F;view&gt;\n</code></pre><p>将id进行定义，通过获取id拿到对应的tab类型。</p>\n<p>其中<code>catchtap</code>是事件绑定。</p>\n<p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。</p>\n<p>在topics.js获取</p>\n<pre class=\"prettyprint\"><code>  onTapTag: function (e) {\n    var self = this;\n    var tab = e.currentTarget.id;\n    &#x2F;&#x2F; 这里就能获取到不同的tab值了\n    self.setData({\n      tab: tab\n    });\n    if (tab !== &#x27;all&#x27;) {\n      this.fetchData({tab: tab});\n    } else {\n      this.fetchData();\n    }\n  },\n</code></pre><h4>4.下一页的实现</h4>\n<p>根据文档，组件的视图容器中有<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/scroll-view.html?t=1474887496374\">scroll-view</a>这个可滚动视图区域。</p>\n<h5>注意：使用竖向滚动时，需要给&lt;scroll-view/&gt;一个固定高度。</h5>\n<pre class=\"prettyprint\"><code>&lt;scroll-view class=&quot;posts-list&quot; style=&quot;height:100%&quot; scroll-y=&quot;true&quot; bindscrolltolower=&quot;lower&quot;&gt;\n  &lt;block wx:for=&quot;{{postsList}}&quot;&gt;\n    ...\n  &lt;&#x2F;block&gt;\n&lt;&#x2F;scroll-view&gt;\n</code></pre><p>topics.js文件</p>\n<pre class=\"prettyprint\"><code>  lower: function (e) {\n    var self = this;\n    &#x2F;&#x2F; 修改当前页码\n    self.setData({\n      page: self.data.page + 1\n    });\n    &#x2F;&#x2F; 判断当前页的tab值 进行请求数据\n    if (self.data.tab !== &#x27;all&#x27;) {\n      this.fetchData({tab: self.data.tab, page: self.data.page});\n    } else {\n      this.fetchData({page: self.data.page});\n    }\n  }\n</code></pre><h4>5.跳页的实现</h4>\n<p>在<code>posts-item</code>中已经进行了事件绑定。利用<code>wx.navigateTo</code>实现页面的跳转。</p>\n<h5>注意：一个应用同时只能打开5个页面，当已经打开了5个页面之后，wx.navigateTo不能正常打开新页面。</h5>\n<pre class=\"prettyprint\"><code>redictDetail: function (e) {\n  console.log(&#x27;我要看详情&#x27;);\n  var id = e.currentTarget.id,\n      url = &#x27;..&#x2F;detail&#x2F;detail?id=&#x27; + id;\n      &#x2F;&#x2F; 这里的detail是需要创建对应的文件，以及页面注册的\n  wx.navigateTo({\n    url: url\n  })\n},\n</code></pre><h3>4.实现详情页</h3>\n<p>同样的原理，创建detail文件，并注册，获取数据，并美化页面。\n<img src=\"//dn-cnode.qbox.me/FmJ5n5-t3gLCfFQTpbzIBS1_ag2L\" alt></p>\n<h3>5.总结</h3>\n<ul>\n<li>微信小应用页面的脚本逻辑在是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能再脚本中使用window，也无法在脚本中操作组件</li>\n<li>同样不能用jquery</li>\n<li>也不能操作dom</li>\n<li>部分标签不支持，比如 h1-h6 会编译报错。</li>\n<li>暂时没找到解决富文本详情页显示的办法。</li>\n<li>整体下来，感觉开发简单，限制很多。</li>\n<li>写过react的看这个确实比较简单。</li>\n</ul>\n<p>放上我的github地址\n<a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p>\n<p>最后感谢：cnode社区和博卡君</p>\n<p>附上 博卡君的教程</p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/750055\">全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/750495\">博卡君的应用号（小程序）开发教程首发第二弹！（0923）</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/750974\">第三弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/751826\">第四弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/752421\">第五弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/753597\">第六弹！全球首个微信小程序（应用号）开发教程！通宵吐血赶稿！</a>\n－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n总结一下我遇到的问题\n1.页面没有注册 那么 template 模版无法传递数据 拿不到动态数据 但是能使用wxss\n2.进度条注意右侧百分号 100%的时候 进度条缩短\n3.轮播图加上属性vertical=“vertical/horizontal” 可以修改布局方向，文档没说\n4.有关icon，文档提供默认的只有9个，实际目前测出有15个 success, info, warn, waiting, safe_success, safe_warn,success_circle, success_no_circle, waiting_circle, circle, download,info_circle, cancel, search, clear\n－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n鉴于有很多童鞋还不了解小应用和h5页面有什么区别\n我决定安利一下我公司的一个文章\n<a href=\"http://url.cn/41kcsQr\">小云百科:什么是“微信小程序”</a></p>\n</div>",
            "title": "分享我用cnode社区api做微信小应用的入门过程",
            "last_reply_at": "2017-03-29T14:32:53.981Z",
            "good": false,
            "top": true,
            "reply_count": 182,
            "visit_count": 45583,
            "create_at": "2016-09-27T07:53:31.872Z",
            "author": {
                "loginname": "coolfishstudio",
                "avatar_url": "https://avatars2.githubusercontent.com/u/8791709?v=3&s=120"
            }
        },
        {
            "id": "588a959b1dc8ff8739cbc66d",
            "author_id": "54009f5ccd66f2eb37190485",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h1>Node.js 2016 回顾</h1>\n<h2>1）Node.js版本变化</h2>\n<p><a href=\"https://github.com/nodejs/LTS#lts-schedule\">https://github.com/nodejs/LTS#lts-schedule</a></p>\n<p><img src=\"//dn-cnode.qbox.me/Fv8fvViUeOJpBlOWYzBo1txRUhdN\" alt=\"lts-schedule.png\"></p>\n<ul>\n<li>发布Node.js 6.x 并进入LTS（长期支持版本），凡是LTS的都可以在生成环境使用</li>\n<li>发布Node.js 7.x 支持Async/await，尽管需要加flag才可以开启</li>\n</ul>\n<p>根据<a href=\"http://node.green/\">node.green</a>统计Node.js 6.x（LTS下面）的es 2015即es6兼容99%</p>\n<p><a href=\"https://nodesource.com/blog/the-10-key-features-in-node-js-v6-lts-boron-after-you-upgrade\">Node.js 6.x支持的10大关键特性</a></p>\n<ul>\n<li>\n<ol>\n<li>DevTools Inspector Integration</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Capture Names of Listeners on an EventEmitter</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Overhauled Buffers Constructor APIs</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Unhandled Promise rejection warnings</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Quick and Safe Temporary Directory Creation</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Timing Attack Prevention</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Process Warnings API</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Symlink Preservation</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>V8 Performance Profiling Directly Through Node.js</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Process CPU usage</li>\n</ol>\n</li>\n</ul>\n<h2>2）Node.js在2016年被哪些企业使用？</h2>\n<ul>\n<li>高朋使用Node.js重建了整个Web层</li>\n</ul>\n<p>作为决策的结果，高朋团队使用Node.js重建整个Web层</p>\n<p>他们在多个平台使用Node:</p>\n<ol>\n<li>大概3-400个后端服务使用Nde.js Java和Ruby混合</li>\n<li>使用Node作为API集成层。</li>\n<li>使用Node作为后端服务的客户端，包括网站。</li>\n</ol>\n<p>当前，高朋有70个Node.js生产应用。应用在30个国家。</p>\n<ul>\n<li>Node.js在Skycatch应用</li>\n</ul>\n<p>skycatch是家数据公司，帮助捕获、管理和分析商业无人机数据。skycatch看到挖掘数据需要大量查询数据库。使用现有的工具如原始SQL查询是困难和耗时的，而skycatch的解决方案可以方便地从网站中提取可操作的数据。</p>\n<p>“我们在你能想得到的地方都使用了node - Node是我们的胶水”。</p>\n<ul>\n<li>Node.js在Lowe’s Home Improvement 应用</li>\n</ul>\n<p>通过Node.js，工程师队可以拥有从UI到后端整个堆栈的全部开发职责，前端他们能够重用自己在JavaScript和HTML上的精通。</p>\n<p>现在他们可以很快地把新的功能放一起做原型设计做研究和做一些用户测试。然后把这个想法应用到生产级别并发布，不会导致应用程序栈其他部分的风险</p>\n<p>原文http://www.jdon.com/48441</p>\n<p>上面是国外的一些，据我所知很多大公司都用Node.js只是没人出来讲而已，创业公司就更加数不胜数了。</p>\n<p><a href=\"https://cnodejs.org/topic/57612b1ace2caded068f9d80\">调查一下，用Koa的公司来顶一下</a> 这个帖子，7个月之前，统计Koa都很20家左右，所以整体来看，普及力度还不错的。</p>\n<h2>3）left-pad事件</h2>\n<p>2016年3月份，kik是Azer写的模块，但Kik同时是手机通信录的社交软件，所以这个社交软件上就无耻的直接说让Azer把kik名字给他们，Azer不同意，他们就拿律师函恐吓，并让npm妥协，所以npm就妥协了</p>\n<p>Azer一怒之下将自己在 npm 上的 273 个封包全部撤下，其中就包括 left-pad 封包。一石激起千层浪，依赖 left-pad 的上千个项目包括 babel 和 react-native 瞬间崩溃。大量开发者看着自己项目构建失败，顿时被吓尿。</p>\n<p>观点</p>\n<ul>\n<li>\n<p>1）就没见过这么傻逼的公司，一个红包就能解决的事儿，非要用强权，如果对方在改模块上耗费心血少的话，转给你也没啥问题的。去年百度从我手里要走了一个模块，一个红包而已</p>\n</li>\n<li>\n<p>2）11行代码要不要封装成一个包？</p>\n</li>\n</ul>\n<blockquote>\n<p>sindresorhus: Containing complexity is not about putting everything in one-line functions/modules.</p>\n</blockquote>\n<p>你的模块必须含有一定的复杂性，不然就没啥意义了。</p>\n<ul>\n<li>3）npm看着那么多包，大多数都是无意义的吧？</li>\n</ul>\n<p>从我开始讲<a href=\"https://github.com/i5ting/nodejs-fullstack\">Node.js全栈</a>大约是3月份，那是npm上是25.6万个吧，截止到年底是35万个，我想说的是那个包仓库都是有好有坏，按照80/20原则，数量是也是相当可观的。总比那些某些语言连包管理机制都不完善的要强吧！</p>\n<ul>\n<li>4）结果npm调整了撤销策略，24小时之后就不让撤销了</li>\n</ul>\n<blockquote>\n<p>If the version is less than 24 hours old, you can unpublish it. The package will be completely removed from the registry.</p>\n</blockquote>\n<p><a href=\"http://blog.npmjs.org/post/141905368000/changes-to-npms-unpublish-policy\">http://blog.npmjs.org/post/141905368000/changes-to-npms-unpublish-policy</a></p>\n<h2>4）Yarn：一个高效的npm替代品</h2>\n<p>2016年10月份, Facebook 和 Google 联手搞出 Yarn，你一个新的包管理器。一周之内，在github上star过万，现在已经21843个star了。</p>\n<p>替换的原因</p>\n<ul>\n<li>在Facebook的大规模 npm 都工作的不太好</li>\n<li>npm拖慢了公司的ci工作流</li>\n<li>对一个检查所有的模块也是相当低效的</li>\n<li>npm被设计为是不确定性的，而Facebook工程师需要为他们的DevOps工作流提供一直和可依赖的系统</li>\n</ul>\n<p>与hack npm限制的做法相反，Facebook编写了Yarn</p>\n<ul>\n<li>Yarn 的本地缓存文件做的更好</li>\n<li>Yarn 可以并行它的一些操作，这加速了对新模块的安装处理</li>\n<li>Yarn 使用lockfiles，并用确定的算法来创建一个所有跨机器上都一样的文件</li>\n<li>出于安全考虑，在安装进程里，Yarn 不允许编写包的开发者去执行其他代码</li>\n</ul>\n<blockquote>\n<p>Yarn, which promises to even give developers that don’t work at Facebook’s scale a major performance boost, still uses the npm registry and is essentially a drop-in replacement for the npm client.</p>\n</blockquote>\n<p>很多人说和ruby的gem机制类似，都生成lockfile。确实是一个很不错的改进，在速度上有很大改进，配置cnpm等国内源来用，还是相当爽的。</p>\n<h2>5）Chrome DevTools支持Node.js 应用调试了！</h2>\n<p><a href=\"https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools\">https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools</a></p>\n<p>要求</p>\n<ul>\n<li>\n<ol>\n<li>Node.js 6.3+</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>Chrome 55+</li>\n</ol>\n</li>\n</ul>\n<p>步骤</p>\n<ul>\n<li>开启chrome://flags/#enable-devtools-experiments URL</li>\n<li>启动 Developer Tools experiments flag</li>\n<li>重启 Chrome</li>\n<li>打开 DevTools Setting -&gt; Experiments tab (重启之后的才能看见)</li>\n<li>按下 “SHIFT” 6 次</li>\n<li>选中 “Node debugging” 复选框</li>\n<li>打开/关闭 DevTools</li>\n</ul>\n<p><img src=\"//dn-cnode.qbox.me/FovQrhrxMpM2sBjtEwN17ugxPHLN\" alt=\"devtool.png\"></p>\n<p><a href=\"https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools\">https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools</a></p>\n<p>另外推荐一个electron包装的devtool，也非常好</p>\n<p><a href=\"https://github.com/Jam3/devtool\">https://github.com/Jam3/devtool</a></p>\n<p><img src=\"https://camo.githubusercontent.com/50a1b83c05a2995479bb27d913e12b6f25557f2c/687474703a2f2f692e696d6775722e636f6d2f56345251535a322e676966\" alt=\"Dev Tools\"></p>\n<h2>6）lerna：一个用户管理多个包模块的工具。</h2>\n<p><a href=\"https://lernajs.io/\">https://lernajs.io/</a></p>\n<p>非常好用，babel等都大量应用</p>\n<h2>7）Flow和Typescript越来越流行</h2>\n<p>Flow 是一个新的开源JavaScript静态类型检查器给JavaScript增加了静态类型来提高开发人员的生产力和代码质量。特别是，静态类型提供了一些极大的助益，如前期错误检测，它可以帮助您避免某些种运行时故障；如代码的智能提示，这有助于代码维护、导航、转换和优化。</p>\n<p>TypeScript是JavaScript类型（es6）的超集，它可以编译成纯JavaScript。可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。类型检查啊也是非常棒的。</p>\n<p>由于大规模和深度js应用，导致js编写复杂性越来越高，而且又要多人合作，所以对于静态类型的需求会尤其大，flow相对更加轻量级，ts更加像一揽子解决方案。以我的观察，flow就是react这阵风带起来的，喜欢轻量级的可以考虑，长久来看，ts可能会有更大的发展潜力。我相信在2017年ts会有更好的成长，无论是前端，还是Node.js，都会大量应用。</p>\n<h2>8）异步流程演进</h2>\n<p>这里加异步流程演进部分，目的是为了后面讲述框架变化做铺垫，同时异步流程控制也是Node.js非常核心的内容，是每个开发者都必须掌握的。</p>\n<p>JavaScript流程控制的演进过程，分以下6部分:</p>\n<ol>\n<li>同步代码</li>\n<li>异步JavaScript: callback hell</li>\n<li>Thunk</li>\n<li>Promise/a+</li>\n<li>生成器Generators/yield</li>\n<li>Async函数/Await（以前说是ES7 stage-3）</li>\n</ol>\n<p>看起来挺简单的，作为*js（沾边）工程师的各位自测一下，当前是哪个阶段？</p>\n<p>我对异步流程控制的总结</p>\n<ul>\n<li>Async函数是趋势，如果Chrome 52. v8 5.1已经支持Async函数(<a href=\"https://github.com/nodejs/CTC/issues/7\">https://github.com/nodejs/CTC/issues/7</a>)了，Node.js已经支持，Node.js 7.x版本需要加flag才能开启，在明年的8.x里会默认开启。</li>\n<li>Async和Generator函数里都支持promise，所以promise是必须会的。</li>\n<li>Generator和yield异常强大，不过不会成为主流，所以学会基本用法和promise就好了，没必要所有的都必须会。</li>\n<li>co作为Generator执行器是不错的，它更好的是当做Promise 包装器，通过Generator支持yieldable，最后返回Promise，是不是有点无耻？</li>\n</ul>\n<p>我整理了一张图，更直观一些。</p>\n<p><img src=\"//dn-cnode.qbox.me/FkcPwxdGHSCHFvA2nU0ub0zYNRt4\" alt=\"async-all.png\"></p>\n<ul>\n<li>红色代表Promise，是使用最多的，无论async还是generator都可用</li>\n<li>蓝色是Generator，过度货</li>\n<li>绿色是Async函数，趋势</li>\n</ul>\n<p><strong>结论</strong>：Promise是必须会的，那你为什么不顺势而为呢？</p>\n<p><strong>推荐</strong>：使用Async函数 + Promise组合，如下图所示。</p>\n<p><img src=\"//dn-cnode.qbox.me/FhVQF1FKB6sNkoFTc3gU-SVnkGtm\" alt=\"async-suggest.png\"></p>\n<h2>9） vsc是一个比较潮比较新的编辑器</h2>\n<p><img src=\"http://code.visualstudio.com/home/home-screenshot-mac-2x.png\" alt></p>\n<p>（跨平台Mac OS X、Windows和 Linux ）</p>\n<ul>\n<li>vsc功能和textmate、sublime、notepad++，ultraedit等比较，毫不逊色</li>\n<li>vsc尤其是在nodejs（调试）和typescript、go上支持尤其好</li>\n<li>vsc提供了自定义 Debugger Adapter 和 VSCode Debug Protocol 从而实现自己的调试器</li>\n</ul>\n<p>vsc的宣传语是：</p>\n<pre class=\"prettyprint\"><code> 一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。\n</code></pre><p>按它说的，vsc特别适合来作为前端开发编辑器。</p>\n<p>内置html开发神器emmet(zencoding),对css及其相关编译型语言Less和Sass都有很好的支持。</p>\n<p>当然，最nice的还是写js代码了，这也是我接下来要着重介绍的功能。</p>\n<p>目前vsc已经开源了：</p>\n<ul>\n<li>代码https://github.com/Microsoft/vscode</li>\n<li>官方博客http://blogs.msdn.com/b/vscode/?Redirected=true</li>\n<li>roadmap <a href=\"https://github.com/Microsoft/vscode/wiki/Roadmap\">https://github.com/Microsoft/vscode/wiki/Roadmap</a></li>\n<li>支持go语言 <a href=\"https://github.com/Microsoft/vscode-go\">https://github.com/Microsoft/vscode-go</a></li>\n</ul>\n<p><a href=\"https://github.com/i5ting/vsc\">https://github.com/i5ting/vsc</a></p>\n</div>",
            "title": "Node.js 2016 回顾以及2017展望",
            "last_reply_at": "2017-03-26T10:21:43.238Z",
            "good": false,
            "top": true,
            "reply_count": 56,
            "visit_count": 20325,
            "create_at": "2017-01-27T00:34:35.167Z",
            "author": {
                "loginname": "i5ting",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
            }
        },
        {
            "id": "58e356ccc669764920c0099a",
            "author_id": "5717adc31796460c51632e4c",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>用express-generator脚手架生成的项目，如何部署生产模式？</p>\n</div>",
            "title": "用express-generator脚手架生成的项目，如何部署生产模式？",
            "last_reply_at": "2017-04-04T08:56:59.958Z",
            "good": false,
            "top": false,
            "reply_count": 4,
            "visit_count": 37,
            "create_at": "2017-04-04T08:18:20.051Z",
            "author": {
                "loginname": "NOOZN",
                "avatar_url": "https://avatars1.githubusercontent.com/u/15944686?v=3&s=120"
            }
        },
        {
            "id": "58e257bfc669764920c00982",
            "author_id": "56f097340a5a2cfb3ad148b2",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p><img src=\"//dn-cnode.qbox.me/Fprlw43eeRHw8RtUlohNp3otlJAM\" alt=\"QQ截图20170403220711.png\">\n<img src=\"//dn-cnode.qbox.me/Fin9tVpw57oILguoUbcs28pOaDbx\" alt=\"QQ截图20170403220653.png\">\n如上面的代码和结果图所示，莫非我是在构造对象数组的时候错了？\n有大神遇到过类似的问题吗？\n下图是我构造对象数组的代码\n<img src=\"//dn-cnode.qbox.me/FkdJMh6hI2ox_thBl3RJY60BdEL0\" alt=\"QQ截图20170403220932.png\"></p>\n</div>",
            "title": "用Promise，resolve了一个对象数组，数组是数组，但是对象不是对象，有大神能解答下吗？",
            "last_reply_at": "2017-04-04T08:44:24.826Z",
            "good": false,
            "top": false,
            "reply_count": 5,
            "visit_count": 174,
            "create_at": "2017-04-03T14:10:07.398Z",
            "author": {
                "loginname": "Coder-Li",
                "avatar_url": "https://avatars2.githubusercontent.com/u/16173290?v=3&s=120"
            }
        },
        {
            "id": "58ca4089246a2aeb194a5447",
            "author_id": "54c261080d075f173d433e4f",
            "tab": "job",
            "content": "<div class=\"markdown-text\"><p><strong>交控科技股份有限公司招聘</strong></p>\n<p>任职描述:\n1：熟练使用javascript，会解异步的各种姿势，了解元编程等js高级编程技巧\n2：后端熟练使用koa\n3：前端使用过除了jquery以外的其他框架（vuejs,reactjs,angular我们都有用到。暂时不会的话也没事，可以来了再学）\n4：对mvc设计模式有深刻了解\n5：严格按照restful方式写接口\n6：会写测试\n7：有服务器运维经验\n8：数据库必须用过一两种\n9：git必须会\n10：良好的团队合作意识和表达能力</p>\n<p>加分项：\n1：有一定的算法功底\n2：有除了js以外其他语言的使用经验\n3：实践过docker，持续集成\n4：实践过前端的编译链(gulp,webpack等等)\n5：会搞cad（不会非要你干这个）\n6：对websocket有了解\n7：会C#（不会非要你干这个）\n8：对机器学习有所尝试（不会非要你干这个）</p>\n<p><strong>严重加分项：\n对技术有热情</strong></p>\n<p>关于我们：\n公司致力于建立一个符合高速铁路、城市轨道交通和磁悬浮三大领域的列车运行控制系统技术和产品体系，面向公众提供高效、可靠、低耗能的轨道交通控制设备，并针对产品提供优质、全面的技术支持服务。\n北京，天津，成都，长沙，重庆，深圳，石家庄，乌鲁木齐，哈萨克斯坦，越南，都有我们承建的轨道项目。</p>\n<p>任职地点：\n成都，高新区，两江国际</p>\n<p>薪资：\n与实力和市场价相匹配，我们是多劳多得原则，优厚的薪资和平台给予刻苦提升技艺的你。</p>\n<p>联系方式：\n<a href=\"mailto:hr@cq-tct.com\">hr@cq-tct.com</a></p>\n</div>",
            "title": "【成都】招聘  初   中   高   级nodejs工程师",
            "last_reply_at": "2017-04-04T07:54:51.645Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 243,
            "create_at": "2017-03-16T07:36:41.445Z",
            "author": {
                "loginname": "yaonie084",
                "avatar_url": "https://avatars1.githubusercontent.com/u/335502?v=3&s=120"
            }
        },
        {
            "id": "58de104f03d476b42d34c92d",
            "author_id": "58da0587b3e60b982d089c60",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里这是一个测试标题尽量把话题要点浓缩到标题里\n测试</p>\n</div>",
            "title": "这是一个测试标题尽量把话题要点浓缩到标题里",
            "last_reply_at": "2017-04-04T07:36:27.960Z",
            "good": false,
            "top": false,
            "reply_count": 0,
            "visit_count": 189,
            "create_at": "2017-03-31T08:16:15.451Z",
            "author": {
                "loginname": "niices",
                "avatar_url": "https://avatars3.githubusercontent.com/u/8327775?v=3&s=120"
            }
        },
        {
            "id": "58e33772ccbecc24201d9531",
            "author_id": "58d39d9003d476b42d34c684",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>最近发现了  node.js 的一个 MVC 框架，想开发成一个 api</p>\n<p>用的数据库是 mongodb ，（ps：没有接触过 mongodb 数据库，借此机会学习一下）</p>\n<p>现在比较困扰的就是官方针对 mongodb 相关的文档太少了，导致我现在处于不会写的状态。</p>\n<p>这边有一个 action，接受前端 post 过来的数据\n<img src=\"//dn-cnode.qbox.me/Fn7Y8Hm5QmUxJWTgeDP9FvoJ0DOg\" alt=\"untitled1.png\">\n这边有个 model，作为数据处理中心\n<img src=\"//dn-cnode.qbox.me/FsvUvE85F19wC4xP6Wvukm99CEec\" alt=\"untitled3.png\"></p>\n<p>现在我就不知道，action 怎么去调用 model 中的 login 方法，login方法怎么去操作 mongodb 进行数据的增删改查功能</p>\n</div>",
            "title": "关于 thinkjs 和 mongodb 的那些事",
            "last_reply_at": "2017-04-04T06:56:56.682Z",
            "good": false,
            "top": false,
            "reply_count": 1,
            "visit_count": 57,
            "create_at": "2017-04-04T06:04:34.550Z",
            "author": {
                "loginname": "vxhly",
                "avatar_url": "https://avatars3.githubusercontent.com/u/17906558?v=3&s=120"
            }
        },
        {
            "id": "58df9af9746fb4600203905d",
            "author_id": "57466fd7fd93c1011f94ab3e",
            "tab": "job",
            "content": "<div class=\"markdown-text\"><p><strong>关于 FooAds</strong>\n我们通过实时社会化数据整合系统，对国内外社会化媒体进行聚合，通过分布式大数据处理系统以及人工智能识别模型，每天分析数以亿计的用户社交与互动数据，从海量数据中挖掘社交关系链与自媒体商业价值，绘制精准的用户画像，构造用户兴趣图谱。\n<a href=\"https://www.fooads.com\">了解产品</a></p>\n<p><strong>待遇</strong>\n薪水：20-40K\n期权：大量</p>\n<p><strong>Tips</strong>\n不加班，Macbook Pro + 24寸 4K 显示器</p>\n<p><strong>职位描述</strong>\n负责产品后端模块的开发，测试和维护\n参与后端代码的重构和优化，实现产品特性的快速迭代\n与其他团队成员紧密沟通合作，共同完成项目</p>\n<p><strong>职位要求</strong>\n熟悉 Node.js 开发，JavaScript 基本概念清晰，熟练掌握闭包、回调、Promise 等\n熟悉 Express / Koa 等常用框架，对 MVC 有一定了解，或者有自己的一套应用开发理念\n掌握 Git 版本控制工具\n扎实的计算机科学基础知识，熟悉操作系统，数据库、常见数据结构和算法，以及软件设计实践\n熟悉 Linux / Unix 操作系统\n快速学习成长，能迅速适应创业节奏和团队氛围</p>\n<p><strong>加分项</strong>\n熟悉 StrongLoop\n除了 Node.js 之外，对其他语言也有所涉猎，比如 Ruby，Elixir，Rust，Scala，Clojure 等\nGithub 有后端项目超过 100 star，或给大型开源项目贡献过代码\n具备设计公开 API 接口的实战经验</p>\n<p><strong>联系方式</strong>\n微信：artbmb\n邮件：join@fooads.com\n地址：北京朝阳区国贸附近，建外SOHO</p>\n<p><strong>公司环境</strong>\n<img src=\"//dn-cnode.qbox.me/FmPDgTOhJGEMn-G7y8Gcr8tX2YEb\" alt=\"3.png\"></p>\n<p><img src=\"//dn-cnode.qbox.me/FksYZ_ZoQxhc9lrSI-n1rqpvo0-V\" alt=\"2.png\"></p>\n</div>",
            "title": "[北京·国贸] FooAds 招聘 Node.js 工程师 20-40K",
            "last_reply_at": "2017-04-04T05:11:20.091Z",
            "good": false,
            "top": false,
            "reply_count": 3,
            "visit_count": 102,
            "create_at": "2017-04-01T12:20:09.623Z",
            "author": {
                "loginname": "iDrummer",
                "avatar_url": "https://avatars3.githubusercontent.com/u/6134199?v=3&s=120"
            }
        }
    ]
}